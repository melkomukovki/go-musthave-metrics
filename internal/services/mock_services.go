// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/services.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entities "github.com/melkomukovki/go-musthave-metrics/internal/entities"
)

// MockServiceRepository is a mock of ServiceRepository interface.
type MockServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRepositoryMockRecorder
}

// MockServiceRepositoryMockRecorder is the mock recorder for MockServiceRepository.
type MockServiceRepositoryMockRecorder struct {
	mock *MockServiceRepository
}

// NewMockServiceRepository creates a new mock instance.
func NewMockServiceRepository(ctrl *gomock.Controller) *MockServiceRepository {
	mock := &MockServiceRepository{ctrl: ctrl}
	mock.recorder = &MockServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRepository) EXPECT() *MockServiceRepositoryMockRecorder {
	return m.recorder
}

// AddMetric mocks base method.
func (m *MockServiceRepository) AddMetric(ctx context.Context, metric entities.MetricInternal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetric", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMetric indicates an expected call of AddMetric.
func (mr *MockServiceRepositoryMockRecorder) AddMetric(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetric", reflect.TypeOf((*MockServiceRepository)(nil).AddMetric), ctx, metric)
}

// AddMultipleMetrics mocks base method.
func (m *MockServiceRepository) AddMultipleMetrics(ctx context.Context, metrics []entities.MetricInternal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMultipleMetrics", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMultipleMetrics indicates an expected call of AddMultipleMetrics.
func (mr *MockServiceRepositoryMockRecorder) AddMultipleMetrics(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMultipleMetrics", reflect.TypeOf((*MockServiceRepository)(nil).AddMultipleMetrics), ctx, metrics)
}

// GetAllMetrics mocks base method.
func (m *MockServiceRepository) GetAllMetrics(ctx context.Context) ([]entities.MetricInternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", ctx)
	ret0, _ := ret[0].([]entities.MetricInternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockServiceRepositoryMockRecorder) GetAllMetrics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockServiceRepository)(nil).GetAllMetrics), ctx)
}

// GetMetric mocks base method.
func (m *MockServiceRepository) GetMetric(ctx context.Context, metricType, metricName string) (entities.MetricInternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", ctx, metricType, metricName)
	ret0, _ := ret[0].(entities.MetricInternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockServiceRepositoryMockRecorder) GetMetric(ctx, metricType, metricName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockServiceRepository)(nil).GetMetric), ctx, metricType, metricName)
}

// Ping mocks base method.
func (m *MockServiceRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockServiceRepositoryMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockServiceRepository)(nil).Ping), ctx)
}
